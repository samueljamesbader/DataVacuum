Names Default To Here(1); dv=::dv;

dv:LotPreselector = Function({dbtable,single=0},{Default Local},
	// Asks the user to choose a lot and returns it
	// Args:
	//   dbtable: the DataVacuum measurement group from which to list lots
	//   single: if 1, allow only a single pick, return is either the lot or {}.
	//           if 0, allow any number of lots, return is as a list of lots or {}.
	// Returns:
	//   See argument 'single' above
	
	qname="Lots For"||dbtable;
	Try(Close(DataTable(qname),NoSave), "No issue");
	dt=New SQL Query(
		Connection(dv:conn_str_no_pass),
		QueryName(qname),
		CustomSQL("select distinct \!"Lot\!" from \!"jmp\!".\!""||dbtable||"\!";")
	) << Run Foreground(Invisible);
	potential_lots=Column(dt,"Lot")<<Get Values();
	If(single,
		win=New Window("Select Lot",<<modal,<<return result,
			lots=ListBox(potential_lots,maxSelected(1)))
	,//Else
		win=New Window("Select Lot",<<modal,<<return result,
			lots=ListBox(potential_lots)));
	If(win["Button"]==1,
		If(single,
			If(Length(win["lots"]),
				lot=win["lots"][1]
			,//Else
				lot={}
			)
		,//Else
			lot=win["lots"];
		)
	,//Else
		lot={};
	);
	lot
);

dv:LotPreselectorSQL = Function({dbtable, single=0, err on none=0},
	// Runs the dv:LotPreselector, except return is an SQL 'where' statement which
	// can be concatenated onto a CustomSQL query
	// Args:
	//   dbtable, single: passed to dv:LotPreselector
	//   err on none: whether to raise an error if the user makes no selection.
	If(single,
		lot=dv:LotPreselector(dbtable,single);
		If(lot=={},
			If(err on none,
				Throw("No lots selected")
			,//Else
				"")
		,//Else
			" where \!"Lot\!"='"||lot||"'")
	,//Else (not single)
		lots=dv:LotPreselector(dbtable,single);
		If(lots=={},
			If(err on none,
				Throw("No lots selected")
			,//Else
				"")
		,//Else
			" where \!"Lot\!" in ('"||Concat Items(lots,"','")||"')"
		)
	)
);


dv:AbsCurrents = Function({dt=0},
	dt = If( dt!=0, dt, Current Data Table());
	cnames = dt << Get Column Names(String);
	For Each( {col, _}, cnames,
		If( Starts With(col, "I") & !Ends With(col, "]"),
			target name="|"||col||"|";
			If(!Contains(cnames, target name),
				Eval(Eval Expr(
					dt << New Column(target name,
						Formula(Abs(Expr(Parse(col)))
					))));
			);
		);
	);
);