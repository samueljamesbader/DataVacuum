Names Default To Here(1); dv=:::dv;

dv:LotPreselector = Function({dbtable,single=0,additional_checkboxes=0},{Default Local},
	// Asks the user to choose a lot and returns it
	// Args:
	//   dbtable: the DataVacuum measurement group from which to list lots
	//   single: if 1, allow only a single pick, first return is either the lot or {}.
	//           if 0, allow any number of lots, first return is as a list of lots or {}.
	//   additional_checkboxes: list of strings naming additional options for user to check
	// Returns:
	//   Two items.
	//		For first item, see argument 'single' above.
	//   	Second item is a list of strings of selected additional_checkboxes.
	
	qname="Lots For"||dbtable;
	Try(Close(DataTable(qname),NoSave), "No issue");
	dt=New SQL Query(
		Connection(dv:conn_str_no_pass),
		QueryName(qname),
		CustomSQL("select distinct \!"Lot\!" from \!"jmp\!".\!""||dbtable||"\!";")
	) << Run Foreground(Invisible);
	potential_lots=Sort Descending(Column(dt,"Lot")<<Get Values());
	Try(Close(DataTable(qname),NoSave), "No issue");
	If(single,
		win=Eval(Eval Expr(New Window(dbtable,<<modal,<<return result,
			HListBox(
				PanelBox("Select Lot",lots=ListBox(potential_lots,maxSelected(1))),
				If(additional_checkboxes!=0,PanelBox("Other options",checks=CheckBox(additional_checkboxes)))
			)
		)));
	,//Else
		win=Eval(Eval Expr(New Window(dbtable,<<modal,<<return result,
			HListBox(
				PanelBox("Select Lot",lots=ListBox(potential_lots)),
				If(additional_checkboxes!=0,PanelBox("Other options",checks=CheckBox(additional_checkboxes)))
			)
		)));
	);
	If(win["Button"]==1,
		If(single,
			If(Length(win["lots"]),
				lot=win["lots"][1]
			,//Else
				lot={}
			)
		,//Else
			lot=win["lots"];
		);
	,//Else
		lot={};
	);
	If(additional_checkboxes!=0,
		checks=Recode(win["checks"],{additional_checkboxes[_rcNow]});
		Eval List({lot,checks})
	, //Else
		Eval List({lot,{}})
	);
);

dv:LotPreselectorSQL = Function({dbtable, single=0, err on none=1, additional_checkboxes=0},{Default Local},
	// Runs the dv:LotPreselector, except return is an SQL 'where' statement which
	// can be concatenated onto a CustomSQL query
	// Args:
	//   dbtable, single: passed to dv:LotPreselector
	//   err on none: whether to raise an error if the user makes no selection.
	sql="YOOOOO";
	If(single,
		{lot,checks}=dv:LotPreselector(dbtable,single,additional_checkboxes);
		If(lot=={},
			If(err on none,
				Throw("No lots selected")
			,//Else
				sql="")
		,//Else
			sql=" where \!"Lot\!"='"||lot||"'");
	,//Else (not single)
		{lots,checks}=dv:LotPreselector(dbtable,single,additional_checkboxes);
		If(lots=={},
			If(err on none,
				Throw("No lots selected")
			,//Else
				sql="")
		,//Else
			sql=" where \!"Lot\!" in ('"||Concat Items(lots,"','")||"')";
		);
	);
	
	If(additional_checkboxes!=0,
		EvalList({sql,checks})
	,//Else
		sql
	);
);


dv:AbsCurrents = Function({dt=0},
	dt = If( dt!=0, dt, Current Data Table());
	cnames = dt << Get Column Names(String);
	For Each( {col, _}, cnames,
		If( Starts With(col, "I") & !Ends With(col, "]"),
			target name="|"||col||"|";
			If(!Contains(cnames, target name),
				Eval(Eval Expr(
					dt << New Column(target name,
						Formula(Abs(Expr(Parse(col)))
					))));
			);
		);
	);
);

dv:QuickSQL = Function({tablename, sql, close previous=1},
	if(close previous,
		Try(Close(DataTable(tablename)), "No issue");
	);
	New SQL Query(
		Connection(dv:conn_str_no_pass),
		QueryName( tablename ),
		CustomSQL(sql),
	) << Run Foreground();
);

dv:QuickSelect = Function({tablename, sqlrestrict="", close previous=1},
	sql="Select * from jmp.\!""||tablename||"\!""||sqlrestrict;
	dv:QuickSQL(tablename, sql, close previous)
);

dv:QuickSelectWithLotGui = Function({tablename, sqlrestrict="", ask_inc_sweeps=0, close previous=1},
    if (ask_inc_sweeps,
        {sqlrestrict,checks}=dv:LotPreselectorSQL(tablename,0,1,{"include sweeps"});
        Eval List({dv:QuickSelect(tablename, sqlrestrict, close previous),Contains(checks,"include sweeps")!=0});
    ,//Else
        sqlrestrict=dv:LotPreselectorSQL(tablename, 0, 1)||sqlrestrict;
        dv:QuickSelect(tablename, sqlrestrict, close previous);
    )
);