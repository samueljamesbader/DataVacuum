Names Default To Here( 1 ); dv=:::dv;

// dv:PyConn()
// Returns a Python Connection object, initializing it if it doesn't yet exist.
// The initialization includes JMP's Python Init(), Python Connect(), and
// running dv:PyRefresh().  All DataVacuum code should access Python Connection
// through this object.
// Args: None
// Returns: a Python Connection
dv:_pc=0;
dv:PyConn=Function({},
	If(dv:_pc==0,
		Write("Starting Python Connection.\!N");
		paths=Words(dv:PYTHON_SYS_PATHS,";");
		initexpr=Eval Expr(Python Init(
			//Init Trace( "TRUE"),
			Path(Expr(dv:PYTHON_DLL)),
			Python Sys Path(paths)));
		Eval(initexpr);
		dv:_pc=Python Connect();
		dv:PyRefresh(dv:_pc);
	);
	dv:_pc
);

// dv:PyRefresh()
// Reloads the DataVacuum modules inside of the connected Python
// Args:
//   pc - the Python Connection to use. Generally, this argument should NOT be supplied.
//        When not supplied, dv:PyConn() will be used by default.
//        This argument only exists for use by dv:PyConn() itself to avoid infinite loop.
dv:PyRefresh = Function( {pc=0}, {Default Local},
	Write("Refreshing Python\!N");
	pc=If(pc==0, dv:PyConn(), pc);
	dv:PySub("import sys;\!Nif 'datavac' in sys.modules:\!N  from datavac import unload_my_imports; unload_my_imports();", 0, pc);
	pyinit = dv:addin_home || "/jmp16_pyinit.py";
	pyinit = Load Text File(pyinit);
	lines = Words(pyinit,"\!N");
    indented_code="";
    For Each({line,_},lines, indented_code=indented_code||"\!N    "||line;);
	dv:PySub( indented_code, 0, pc );
);

// dv:PySub()
// Submits a python code after wrapping it in a try/except to print errors, and prints the result.
// Purely a convenience, but handy since generally there's no helpful output for failed Python code.
// Args:
//   code - the python code (as a string) to use
//   ret - the variable to return from Python (or 0 to return nothing)
//   pc - the Python Connection to use. Generally, this argument should NOT be supplied.
//        When not supplied, dv:PyConn() will be used by default.
//        This argument only exists for use by dv:PyRefresh() to avoid infinite loop.
dv:PySub = Function( {code, ret=0, pc=0}, {Default Local},
	pc=If(pc==0, dv:PyConn(), pc);
	lines = Words(code,"\!N");
    indented_code="";
    For Each({line,_},lines, indented_code=indented_code||"\!N    "||line;);
	wrapped_code = "import traceback\!Npython_error=None;\!Ntry:\!N" || "    " || indented_code ||
	"\!Nexcept Exception: print((python_error:=traceback.format_exc()))";
	pc << Submit( wrapped_code );
	python_error = pc << Get("python_error");
	If( ! Is Empty( python_error ), Throw( python_error ) );
	If ( ret!=0, Eval(Eval Expr(pc << Get( Expr(ret) ))), python_error );
);

// dv:PullSweeps()
// Pulls the corresponding sweep data for a main table and virtually joins it to the main
// Args:
//   dt - the JMP table for which to pull the corresponding sweeps.  If not supplied,
//        defaults to the current data table.
//   db_table_name -  the view table from DataVacuum from which the JMP table was queried.
//        If not supplied, will be extracted from the Modify Query script of the JMP table.
//        This implicit extraction only works if the JMP table was produced using JMP's
//        Build Query, and other JMP operations which preserve the Modify Query script.
//        So, if you're getting fancy, you may have to supply this explicitly.
//
dv:PullSweeps=Function({dt=0, db_table_name=0, only_headers=0}, {Default Local},
	dt = If( dt!=0, dt, Current Data Table());
	If( N Rows(dt)==0,
        Throw("No rows in the table to pull sweeps for"));
	
	If(db_table_name==0,
		// Get the info from the view data table's Modify Query script needed for query
		source=dt << Get Script("Modify Query");
		If( ! (Head(Arg(source,1))==Expr(New SQL Query())),
			Throw("Table not based on a query."));
		If( ! (Head(Arg(source,2))==Expr(Modify())),
			Throw("Table not based on a query."));	
		//If it's a CustomSQL eg from QuickSelect
		If(Head(Arg(Arg(source,1),3))==Expr(CustomSQL),
			query=Arg(Arg(Arg(source,1),3),1);
			If(Contains(query,"jmp."),
				db_table_name=Regex Match(query,"from jmp.\!"([^\!"]+)\!"")[2];
			,
				db_table_name=Regex Match(query,"from \!"jmp\!".\!"([^\!"]+)\!"")[2];
			)
		,//Else if it's a simple Database -> Build Query
			from_clause=Eval(Eval Expr(Extract Expr(Expr(Arg(source,1)),From(Wild()))));
			If( ! N Arg(Name Expr(from_clause))==1,
				Throw("Multiple tables involved"));
			db_table_name=Arg(Arg(Name Expr(from_clause),1),1);
		);
		Show(db_table_name);
	);
	
	// Prep the view data table to be linked
	If(! Contains( dt << Get Column Names(String), "loadid_measid"),
		linkidcol = dt << New Column( "loadid_measid","Continuous","Nominal",
			Formula(:loadid*1e9+:measid), Set Property( "Link ID", 1)));
	path="$temp/"||(dt << Get Name) || ".jmp";
	dt << Save(path);

	// Deal with header restriction
    Show(only_headers);
    headers_str=If(only_headers==0,"None","[\!""||Concat Items(only_headers, "\!",\!"")||"\!"]");
    Show(headers_str);

	// Run the query in Python
	dv:PyConn() << Send(dt,Python Name("viewdf"));
	error=dv:PySub("sweepdf=get_sweeps_for_jmp('"||db_table_name||"',viewdf['loadid'],viewdf['measid'],only_sweeps="||headers_str||")");
	//Show(error);
	//Show(error!=0);
	If(!IsEmpty(error),
		Write("Problem getting data..\!N"),
	// Else
		Write("Got data\!N");
		sweeptab=dv:PyConn()<<Get("sweepdf");
		
		// Name appropriately and add linkage
		sweeptab_name=(dt<<Get Name)||" -- Sweeps";
		Try(Close(DataTable(sweeptab_name),NoSave), "No issue");
		sweeptab<<Set Name(sweeptab_name);
		linkidcol = sweeptab << New Column( "loadid_measid", "Continuous","Nominal",
			Formula(:loadid*1e9+:measid));
		Column(sweeptab, "loadid_measid") << Set Property( "Link Reference", Reference Table(path) );
		sweeptab << New Column( "loadid_measid_sweepid", "Continuous","Nominal",
			Formula(:loadid*1e10+:measid*1e1+:sweepid));
		sweeptab << New Data View();
	);
	sweeptab;
);

//dv:PyRefresh();